// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SSmsg.proto

#ifndef PROTOBUF_SSmsg_2eproto__INCLUDED
#define PROTOBUF_SSmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DBmsg.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SSmsg_2eproto();
void protobuf_AssignDesc_SSmsg_2eproto();
void protobuf_ShutdownFile_SSmsg_2eproto();

class SSLoginReq;
class SSLoginRsp;
class SSRegisterReq;
class SSRegisterRsp;
class SSQuitReq;
class SSRegisterLoginReqParam;
class SSRegisterLoginRspParam;
class SSRegisterLoginReq;
class SSRegisterLoginRsp;
class SSMsgBody;
class SSMsgHead;
class SSMsg;

enum SSRegisterLoginCmd {
  SSRegisterLoginCmd_Register = 1,
  SSRegisterLoginCmd_Login = 2,
  SSRegisterLoginCmd_Quit = 3,
  SSRegisterLoginCmd_UpdateDatabase = 4
};
bool SSRegisterLoginCmd_IsValid(int value);
const SSRegisterLoginCmd SSRegisterLoginCmd_MIN = SSRegisterLoginCmd_Register;
const SSRegisterLoginCmd SSRegisterLoginCmd_MAX = SSRegisterLoginCmd_UpdateDatabase;
const int SSRegisterLoginCmd_ARRAYSIZE = SSRegisterLoginCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSRegisterLoginCmd_descriptor();
inline const ::std::string& SSRegisterLoginCmd_Name(SSRegisterLoginCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSRegisterLoginCmd_descriptor(), value);
}
inline bool SSRegisterLoginCmd_Parse(
    const ::std::string& name, SSRegisterLoginCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSRegisterLoginCmd>(
    SSRegisterLoginCmd_descriptor(), name, value);
}
enum SSMsgID {
  SS_MSGID_MIN = 1000,
  SS_MSGID_GameMysql = 1001,
  SS_MSGID_MAX = 1002
};
bool SSMsgID_IsValid(int value);
const SSMsgID SSMsgID_MIN = SS_MSGID_MIN;
const SSMsgID SSMsgID_MAX = SS_MSGID_MAX;
const int SSMsgID_ARRAYSIZE = SSMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSMsgID_descriptor();
inline const ::std::string& SSMsgID_Name(SSMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSMsgID_descriptor(), value);
}
inline bool SSMsgID_Parse(
    const ::std::string& name, SSMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSMsgID>(
    SSMsgID_descriptor(), name, value);
}
// ===================================================================

class SSLoginReq : public ::google::protobuf::Message {
 public:
  SSLoginReq();
  virtual ~SSLoginReq();

  SSLoginReq(const SSLoginReq& from);

  inline SSLoginReq& operator=(const SSLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSLoginReq& default_instance();

  void Swap(SSLoginReq* other);

  // implements Message ----------------------------------------------

  SSLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSLoginReq& from);
  void MergeFrom(const SSLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:SSLoginReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class SSLoginRsp : public ::google::protobuf::Message {
 public:
  SSLoginRsp();
  virtual ~SSLoginRsp();

  SSLoginRsp(const SSLoginRsp& from);

  inline SSLoginRsp& operator=(const SSLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSLoginRsp& default_instance();

  void Swap(SSLoginRsp* other);

  // implements Message ----------------------------------------------

  SSLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSLoginRsp& from);
  void MergeFrom(const SSLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .DBRoleInfo Role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::DBRoleInfo& role() const;
  inline ::DBRoleInfo* mutable_role();
  inline ::DBRoleInfo* release_role();
  inline void set_allocated_role(::DBRoleInfo* role);

  // @@protoc_insertion_point(class_scope:SSLoginRsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBRoleInfo* role_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class SSRegisterReq : public ::google::protobuf::Message {
 public:
  SSRegisterReq();
  virtual ~SSRegisterReq();

  SSRegisterReq(const SSRegisterReq& from);

  inline SSRegisterReq& operator=(const SSRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSRegisterReq& default_instance();

  void Swap(SSRegisterReq* other);

  // implements Message ----------------------------------------------

  SSRegisterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSRegisterReq& from);
  void MergeFrom(const SSRegisterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SSRegisterReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSRegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class SSRegisterRsp : public ::google::protobuf::Message {
 public:
  SSRegisterRsp();
  virtual ~SSRegisterRsp();

  SSRegisterRsp(const SSRegisterRsp& from);

  inline SSRegisterRsp& operator=(const SSRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSRegisterRsp& default_instance();

  void Swap(SSRegisterRsp* other);

  // implements Message ----------------------------------------------

  SSRegisterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSRegisterRsp& from);
  void MergeFrom(const SSRegisterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SSRegisterRsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSRegisterRsp* default_instance_;
};
// -------------------------------------------------------------------

class SSQuitReq : public ::google::protobuf::Message {
 public:
  SSQuitReq();
  virtual ~SSQuitReq();

  SSQuitReq(const SSQuitReq& from);

  inline SSQuitReq& operator=(const SSQuitReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSQuitReq& default_instance();

  void Swap(SSQuitReq* other);

  // implements Message ----------------------------------------------

  SSQuitReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSQuitReq& from);
  void MergeFrom(const SSQuitReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBRoleInfo Role = 1;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline const ::DBRoleInfo& role() const;
  inline ::DBRoleInfo* mutable_role();
  inline ::DBRoleInfo* release_role();
  inline void set_allocated_role(::DBRoleInfo* role);

  // @@protoc_insertion_point(class_scope:SSQuitReq)
 private:
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DBRoleInfo* role_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSQuitReq* default_instance_;
};
// -------------------------------------------------------------------

class SSRegisterLoginReqParam : public ::google::protobuf::Message {
 public:
  SSRegisterLoginReqParam();
  virtual ~SSRegisterLoginReqParam();

  SSRegisterLoginReqParam(const SSRegisterLoginReqParam& from);

  inline SSRegisterLoginReqParam& operator=(const SSRegisterLoginReqParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSRegisterLoginReqParam& default_instance();

  void Swap(SSRegisterLoginReqParam* other);

  // implements Message ----------------------------------------------

  SSRegisterLoginReqParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSRegisterLoginReqParam& from);
  void MergeFrom(const SSRegisterLoginReqParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SSLoginReq LoginReq = 1;
  inline bool has_loginreq() const;
  inline void clear_loginreq();
  static const int kLoginReqFieldNumber = 1;
  inline const ::SSLoginReq& loginreq() const;
  inline ::SSLoginReq* mutable_loginreq();
  inline ::SSLoginReq* release_loginreq();
  inline void set_allocated_loginreq(::SSLoginReq* loginreq);

  // optional .SSRegisterReq RegisterReq = 2;
  inline bool has_registerreq() const;
  inline void clear_registerreq();
  static const int kRegisterReqFieldNumber = 2;
  inline const ::SSRegisterReq& registerreq() const;
  inline ::SSRegisterReq* mutable_registerreq();
  inline ::SSRegisterReq* release_registerreq();
  inline void set_allocated_registerreq(::SSRegisterReq* registerreq);

  // optional .SSQuitReq QuitReq = 3;
  inline bool has_quitreq() const;
  inline void clear_quitreq();
  static const int kQuitReqFieldNumber = 3;
  inline const ::SSQuitReq& quitreq() const;
  inline ::SSQuitReq* mutable_quitreq();
  inline ::SSQuitReq* release_quitreq();
  inline void set_allocated_quitreq(::SSQuitReq* quitreq);

  // @@protoc_insertion_point(class_scope:SSRegisterLoginReqParam)
 private:
  inline void set_has_loginreq();
  inline void clear_has_loginreq();
  inline void set_has_registerreq();
  inline void clear_has_registerreq();
  inline void set_has_quitreq();
  inline void clear_has_quitreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SSLoginReq* loginreq_;
  ::SSRegisterReq* registerreq_;
  ::SSQuitReq* quitreq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSRegisterLoginReqParam* default_instance_;
};
// -------------------------------------------------------------------

class SSRegisterLoginRspParam : public ::google::protobuf::Message {
 public:
  SSRegisterLoginRspParam();
  virtual ~SSRegisterLoginRspParam();

  SSRegisterLoginRspParam(const SSRegisterLoginRspParam& from);

  inline SSRegisterLoginRspParam& operator=(const SSRegisterLoginRspParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSRegisterLoginRspParam& default_instance();

  void Swap(SSRegisterLoginRspParam* other);

  // implements Message ----------------------------------------------

  SSRegisterLoginRspParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSRegisterLoginRspParam& from);
  void MergeFrom(const SSRegisterLoginRspParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SSLoginRsp LoginRsp = 1;
  inline bool has_loginrsp() const;
  inline void clear_loginrsp();
  static const int kLoginRspFieldNumber = 1;
  inline const ::SSLoginRsp& loginrsp() const;
  inline ::SSLoginRsp* mutable_loginrsp();
  inline ::SSLoginRsp* release_loginrsp();
  inline void set_allocated_loginrsp(::SSLoginRsp* loginrsp);

  // optional .SSRegisterRsp RegisterRsp = 2;
  inline bool has_registerrsp() const;
  inline void clear_registerrsp();
  static const int kRegisterRspFieldNumber = 2;
  inline const ::SSRegisterRsp& registerrsp() const;
  inline ::SSRegisterRsp* mutable_registerrsp();
  inline ::SSRegisterRsp* release_registerrsp();
  inline void set_allocated_registerrsp(::SSRegisterRsp* registerrsp);

  // @@protoc_insertion_point(class_scope:SSRegisterLoginRspParam)
 private:
  inline void set_has_loginrsp();
  inline void clear_has_loginrsp();
  inline void set_has_registerrsp();
  inline void clear_has_registerrsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SSLoginRsp* loginrsp_;
  ::SSRegisterRsp* registerrsp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSRegisterLoginRspParam* default_instance_;
};
// -------------------------------------------------------------------

class SSRegisterLoginReq : public ::google::protobuf::Message {
 public:
  SSRegisterLoginReq();
  virtual ~SSRegisterLoginReq();

  SSRegisterLoginReq(const SSRegisterLoginReq& from);

  inline SSRegisterLoginReq& operator=(const SSRegisterLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSRegisterLoginReq& default_instance();

  void Swap(SSRegisterLoginReq* other);

  // implements Message ----------------------------------------------

  SSRegisterLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSRegisterLoginReq& from);
  void MergeFrom(const SSRegisterLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SSRegisterLoginCmd cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::SSRegisterLoginCmd cmd() const;
  inline void set_cmd(::SSRegisterLoginCmd value);

  // optional .SSRegisterLoginReqParam reqParam = 2;
  inline bool has_reqparam() const;
  inline void clear_reqparam();
  static const int kReqParamFieldNumber = 2;
  inline const ::SSRegisterLoginReqParam& reqparam() const;
  inline ::SSRegisterLoginReqParam* mutable_reqparam();
  inline ::SSRegisterLoginReqParam* release_reqparam();
  inline void set_allocated_reqparam(::SSRegisterLoginReqParam* reqparam);

  // @@protoc_insertion_point(class_scope:SSRegisterLoginReq)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_reqparam();
  inline void clear_has_reqparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SSRegisterLoginReqParam* reqparam_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSRegisterLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class SSRegisterLoginRsp : public ::google::protobuf::Message {
 public:
  SSRegisterLoginRsp();
  virtual ~SSRegisterLoginRsp();

  SSRegisterLoginRsp(const SSRegisterLoginRsp& from);

  inline SSRegisterLoginRsp& operator=(const SSRegisterLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSRegisterLoginRsp& default_instance();

  void Swap(SSRegisterLoginRsp* other);

  // implements Message ----------------------------------------------

  SSRegisterLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSRegisterLoginRsp& from);
  void MergeFrom(const SSRegisterLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required .SSRegisterLoginCmd cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::SSRegisterLoginCmd cmd() const;
  inline void set_cmd(::SSRegisterLoginCmd value);

  // optional .SSRegisterLoginRspParam rspParam = 3;
  inline bool has_rspparam() const;
  inline void clear_rspparam();
  static const int kRspParamFieldNumber = 3;
  inline const ::SSRegisterLoginRspParam& rspparam() const;
  inline ::SSRegisterLoginRspParam* mutable_rspparam();
  inline ::SSRegisterLoginRspParam* release_rspparam();
  inline void set_allocated_rspparam(::SSRegisterLoginRspParam* rspparam);

  // @@protoc_insertion_point(class_scope:SSRegisterLoginRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_rspparam();
  inline void clear_has_rspparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  int cmd_;
  ::SSRegisterLoginRspParam* rspparam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSRegisterLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class SSMsgBody : public ::google::protobuf::Message {
 public:
  SSMsgBody();
  virtual ~SSMsgBody();

  SSMsgBody(const SSMsgBody& from);

  inline SSMsgBody& operator=(const SSMsgBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSMsgBody& default_instance();

  void Swap(SSMsgBody* other);

  // implements Message ----------------------------------------------

  SSMsgBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSMsgBody& from);
  void MergeFrom(const SSMsgBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SSRegisterLoginReq RegisterLoginReq = 1;
  inline bool has_registerloginreq() const;
  inline void clear_registerloginreq();
  static const int kRegisterLoginReqFieldNumber = 1;
  inline const ::SSRegisterLoginReq& registerloginreq() const;
  inline ::SSRegisterLoginReq* mutable_registerloginreq();
  inline ::SSRegisterLoginReq* release_registerloginreq();
  inline void set_allocated_registerloginreq(::SSRegisterLoginReq* registerloginreq);

  // optional .SSRegisterLoginRsp RegisterLoginRsp = 2;
  inline bool has_registerloginrsp() const;
  inline void clear_registerloginrsp();
  static const int kRegisterLoginRspFieldNumber = 2;
  inline const ::SSRegisterLoginRsp& registerloginrsp() const;
  inline ::SSRegisterLoginRsp* mutable_registerloginrsp();
  inline ::SSRegisterLoginRsp* release_registerloginrsp();
  inline void set_allocated_registerloginrsp(::SSRegisterLoginRsp* registerloginrsp);

  // @@protoc_insertion_point(class_scope:SSMsgBody)
 private:
  inline void set_has_registerloginreq();
  inline void clear_has_registerloginreq();
  inline void set_has_registerloginrsp();
  inline void clear_has_registerloginrsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SSRegisterLoginReq* registerloginreq_;
  ::SSRegisterLoginRsp* registerloginrsp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSMsgBody* default_instance_;
};
// -------------------------------------------------------------------

class SSMsgHead : public ::google::protobuf::Message {
 public:
  SSMsgHead();
  virtual ~SSMsgHead();

  SSMsgHead(const SSMsgHead& from);

  inline SSMsgHead& operator=(const SSMsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSMsgHead& default_instance();

  void Swap(SSMsgHead* other);

  // implements Message ----------------------------------------------

  SSMsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSMsgHead& from);
  void MergeFrom(const SSMsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // required .SSMsgID msgID = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 2;
  inline ::SSMsgID msgid() const;
  inline void set_msgid(::SSMsgID value);

  // @@protoc_insertion_point(class_scope:SSMsgHead)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSMsgHead* default_instance_;
};
// -------------------------------------------------------------------

class SSMsg : public ::google::protobuf::Message {
 public:
  SSMsg();
  virtual ~SSMsg();

  SSMsg(const SSMsg& from);

  inline SSMsg& operator=(const SSMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSMsg& default_instance();

  void Swap(SSMsg* other);

  // implements Message ----------------------------------------------

  SSMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSMsg& from);
  void MergeFrom(const SSMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SSMsgHead head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::SSMsgHead& head() const;
  inline ::SSMsgHead* mutable_head();
  inline ::SSMsgHead* release_head();
  inline void set_allocated_head(::SSMsgHead* head);

  // required .SSMsgBody body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::SSMsgBody& body() const;
  inline ::SSMsgBody* mutable_body();
  inline ::SSMsgBody* release_body();
  inline void set_allocated_body(::SSMsgBody* body);

  // @@protoc_insertion_point(class_scope:SSMsg)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SSMsgHead* head_;
  ::SSMsgBody* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SSmsg_2eproto();
  friend void protobuf_AssignDesc_SSmsg_2eproto();
  friend void protobuf_ShutdownFile_SSmsg_2eproto();

  void InitAsDefaultInstance();
  static SSMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// SSLoginReq

// optional string account = 1;
inline bool SSLoginReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSLoginReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSLoginReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSLoginReq::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& SSLoginReq::account() const {
  return *account_;
}
inline void SSLoginReq::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SSLoginReq::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SSLoginReq::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSLoginReq::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* SSLoginReq::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSLoginReq::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool SSLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSLoginReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SSLoginReq::password() const {
  return *password_;
}
inline void SSLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SSLoginReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SSLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSLoginReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SSLoginReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSLoginReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SSLoginRsp

// optional uint32 type = 1;
inline bool SSLoginRsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSLoginRsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSLoginRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSLoginRsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SSLoginRsp::type() const {
  return type_;
}
inline void SSLoginRsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .DBRoleInfo Role = 2;
inline bool SSLoginRsp::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSLoginRsp::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSLoginRsp::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSLoginRsp::clear_role() {
  if (role_ != NULL) role_->::DBRoleInfo::Clear();
  clear_has_role();
}
inline const ::DBRoleInfo& SSLoginRsp::role() const {
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
inline ::DBRoleInfo* SSLoginRsp::mutable_role() {
  set_has_role();
  if (role_ == NULL) role_ = new ::DBRoleInfo;
  return role_;
}
inline ::DBRoleInfo* SSLoginRsp::release_role() {
  clear_has_role();
  ::DBRoleInfo* temp = role_;
  role_ = NULL;
  return temp;
}
inline void SSLoginRsp::set_allocated_role(::DBRoleInfo* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
}

// -------------------------------------------------------------------

// SSRegisterReq

// optional string account = 1;
inline bool SSRegisterReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSRegisterReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSRegisterReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSRegisterReq::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& SSRegisterReq::account() const {
  return *account_;
}
inline void SSRegisterReq::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SSRegisterReq::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SSRegisterReq::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSRegisterReq::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* SSRegisterReq::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSRegisterReq::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool SSRegisterReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSRegisterReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSRegisterReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSRegisterReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SSRegisterReq::password() const {
  return *password_;
}
inline void SSRegisterReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SSRegisterReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SSRegisterReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSRegisterReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SSRegisterReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSRegisterReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool SSRegisterReq::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSRegisterReq::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSRegisterReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSRegisterReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SSRegisterReq::name() const {
  return *name_;
}
inline void SSRegisterReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSRegisterReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSRegisterReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSRegisterReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SSRegisterReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSRegisterReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SSRegisterRsp

// optional uint32 type = 1;
inline bool SSRegisterRsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSRegisterRsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSRegisterRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSRegisterRsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SSRegisterRsp::type() const {
  return type_;
}
inline void SSRegisterRsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 uid = 2;
inline bool SSRegisterRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSRegisterRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSRegisterRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSRegisterRsp::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 SSRegisterRsp::uid() const {
  return uid_;
}
inline void SSRegisterRsp::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string name = 3;
inline bool SSRegisterRsp::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSRegisterRsp::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSRegisterRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSRegisterRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SSRegisterRsp::name() const {
  return *name_;
}
inline void SSRegisterRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSRegisterRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SSRegisterRsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSRegisterRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SSRegisterRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSRegisterRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SSQuitReq

// optional .DBRoleInfo Role = 1;
inline bool SSQuitReq::has_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSQuitReq::set_has_role() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSQuitReq::clear_has_role() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSQuitReq::clear_role() {
  if (role_ != NULL) role_->::DBRoleInfo::Clear();
  clear_has_role();
}
inline const ::DBRoleInfo& SSQuitReq::role() const {
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
inline ::DBRoleInfo* SSQuitReq::mutable_role() {
  set_has_role();
  if (role_ == NULL) role_ = new ::DBRoleInfo;
  return role_;
}
inline ::DBRoleInfo* SSQuitReq::release_role() {
  clear_has_role();
  ::DBRoleInfo* temp = role_;
  role_ = NULL;
  return temp;
}
inline void SSQuitReq::set_allocated_role(::DBRoleInfo* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
}

// -------------------------------------------------------------------

// SSRegisterLoginReqParam

// optional .SSLoginReq LoginReq = 1;
inline bool SSRegisterLoginReqParam::has_loginreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSRegisterLoginReqParam::set_has_loginreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSRegisterLoginReqParam::clear_has_loginreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSRegisterLoginReqParam::clear_loginreq() {
  if (loginreq_ != NULL) loginreq_->::SSLoginReq::Clear();
  clear_has_loginreq();
}
inline const ::SSLoginReq& SSRegisterLoginReqParam::loginreq() const {
  return loginreq_ != NULL ? *loginreq_ : *default_instance_->loginreq_;
}
inline ::SSLoginReq* SSRegisterLoginReqParam::mutable_loginreq() {
  set_has_loginreq();
  if (loginreq_ == NULL) loginreq_ = new ::SSLoginReq;
  return loginreq_;
}
inline ::SSLoginReq* SSRegisterLoginReqParam::release_loginreq() {
  clear_has_loginreq();
  ::SSLoginReq* temp = loginreq_;
  loginreq_ = NULL;
  return temp;
}
inline void SSRegisterLoginReqParam::set_allocated_loginreq(::SSLoginReq* loginreq) {
  delete loginreq_;
  loginreq_ = loginreq;
  if (loginreq) {
    set_has_loginreq();
  } else {
    clear_has_loginreq();
  }
}

// optional .SSRegisterReq RegisterReq = 2;
inline bool SSRegisterLoginReqParam::has_registerreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSRegisterLoginReqParam::set_has_registerreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSRegisterLoginReqParam::clear_has_registerreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSRegisterLoginReqParam::clear_registerreq() {
  if (registerreq_ != NULL) registerreq_->::SSRegisterReq::Clear();
  clear_has_registerreq();
}
inline const ::SSRegisterReq& SSRegisterLoginReqParam::registerreq() const {
  return registerreq_ != NULL ? *registerreq_ : *default_instance_->registerreq_;
}
inline ::SSRegisterReq* SSRegisterLoginReqParam::mutable_registerreq() {
  set_has_registerreq();
  if (registerreq_ == NULL) registerreq_ = new ::SSRegisterReq;
  return registerreq_;
}
inline ::SSRegisterReq* SSRegisterLoginReqParam::release_registerreq() {
  clear_has_registerreq();
  ::SSRegisterReq* temp = registerreq_;
  registerreq_ = NULL;
  return temp;
}
inline void SSRegisterLoginReqParam::set_allocated_registerreq(::SSRegisterReq* registerreq) {
  delete registerreq_;
  registerreq_ = registerreq;
  if (registerreq) {
    set_has_registerreq();
  } else {
    clear_has_registerreq();
  }
}

// optional .SSQuitReq QuitReq = 3;
inline bool SSRegisterLoginReqParam::has_quitreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSRegisterLoginReqParam::set_has_quitreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSRegisterLoginReqParam::clear_has_quitreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSRegisterLoginReqParam::clear_quitreq() {
  if (quitreq_ != NULL) quitreq_->::SSQuitReq::Clear();
  clear_has_quitreq();
}
inline const ::SSQuitReq& SSRegisterLoginReqParam::quitreq() const {
  return quitreq_ != NULL ? *quitreq_ : *default_instance_->quitreq_;
}
inline ::SSQuitReq* SSRegisterLoginReqParam::mutable_quitreq() {
  set_has_quitreq();
  if (quitreq_ == NULL) quitreq_ = new ::SSQuitReq;
  return quitreq_;
}
inline ::SSQuitReq* SSRegisterLoginReqParam::release_quitreq() {
  clear_has_quitreq();
  ::SSQuitReq* temp = quitreq_;
  quitreq_ = NULL;
  return temp;
}
inline void SSRegisterLoginReqParam::set_allocated_quitreq(::SSQuitReq* quitreq) {
  delete quitreq_;
  quitreq_ = quitreq;
  if (quitreq) {
    set_has_quitreq();
  } else {
    clear_has_quitreq();
  }
}

// -------------------------------------------------------------------

// SSRegisterLoginRspParam

// optional .SSLoginRsp LoginRsp = 1;
inline bool SSRegisterLoginRspParam::has_loginrsp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSRegisterLoginRspParam::set_has_loginrsp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSRegisterLoginRspParam::clear_has_loginrsp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSRegisterLoginRspParam::clear_loginrsp() {
  if (loginrsp_ != NULL) loginrsp_->::SSLoginRsp::Clear();
  clear_has_loginrsp();
}
inline const ::SSLoginRsp& SSRegisterLoginRspParam::loginrsp() const {
  return loginrsp_ != NULL ? *loginrsp_ : *default_instance_->loginrsp_;
}
inline ::SSLoginRsp* SSRegisterLoginRspParam::mutable_loginrsp() {
  set_has_loginrsp();
  if (loginrsp_ == NULL) loginrsp_ = new ::SSLoginRsp;
  return loginrsp_;
}
inline ::SSLoginRsp* SSRegisterLoginRspParam::release_loginrsp() {
  clear_has_loginrsp();
  ::SSLoginRsp* temp = loginrsp_;
  loginrsp_ = NULL;
  return temp;
}
inline void SSRegisterLoginRspParam::set_allocated_loginrsp(::SSLoginRsp* loginrsp) {
  delete loginrsp_;
  loginrsp_ = loginrsp;
  if (loginrsp) {
    set_has_loginrsp();
  } else {
    clear_has_loginrsp();
  }
}

// optional .SSRegisterRsp RegisterRsp = 2;
inline bool SSRegisterLoginRspParam::has_registerrsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSRegisterLoginRspParam::set_has_registerrsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSRegisterLoginRspParam::clear_has_registerrsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSRegisterLoginRspParam::clear_registerrsp() {
  if (registerrsp_ != NULL) registerrsp_->::SSRegisterRsp::Clear();
  clear_has_registerrsp();
}
inline const ::SSRegisterRsp& SSRegisterLoginRspParam::registerrsp() const {
  return registerrsp_ != NULL ? *registerrsp_ : *default_instance_->registerrsp_;
}
inline ::SSRegisterRsp* SSRegisterLoginRspParam::mutable_registerrsp() {
  set_has_registerrsp();
  if (registerrsp_ == NULL) registerrsp_ = new ::SSRegisterRsp;
  return registerrsp_;
}
inline ::SSRegisterRsp* SSRegisterLoginRspParam::release_registerrsp() {
  clear_has_registerrsp();
  ::SSRegisterRsp* temp = registerrsp_;
  registerrsp_ = NULL;
  return temp;
}
inline void SSRegisterLoginRspParam::set_allocated_registerrsp(::SSRegisterRsp* registerrsp) {
  delete registerrsp_;
  registerrsp_ = registerrsp;
  if (registerrsp) {
    set_has_registerrsp();
  } else {
    clear_has_registerrsp();
  }
}

// -------------------------------------------------------------------

// SSRegisterLoginReq

// required .SSRegisterLoginCmd cmd = 1;
inline bool SSRegisterLoginReq::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSRegisterLoginReq::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSRegisterLoginReq::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSRegisterLoginReq::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::SSRegisterLoginCmd SSRegisterLoginReq::cmd() const {
  return static_cast< ::SSRegisterLoginCmd >(cmd_);
}
inline void SSRegisterLoginReq::set_cmd(::SSRegisterLoginCmd value) {
  assert(::SSRegisterLoginCmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional .SSRegisterLoginReqParam reqParam = 2;
inline bool SSRegisterLoginReq::has_reqparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSRegisterLoginReq::set_has_reqparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSRegisterLoginReq::clear_has_reqparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSRegisterLoginReq::clear_reqparam() {
  if (reqparam_ != NULL) reqparam_->::SSRegisterLoginReqParam::Clear();
  clear_has_reqparam();
}
inline const ::SSRegisterLoginReqParam& SSRegisterLoginReq::reqparam() const {
  return reqparam_ != NULL ? *reqparam_ : *default_instance_->reqparam_;
}
inline ::SSRegisterLoginReqParam* SSRegisterLoginReq::mutable_reqparam() {
  set_has_reqparam();
  if (reqparam_ == NULL) reqparam_ = new ::SSRegisterLoginReqParam;
  return reqparam_;
}
inline ::SSRegisterLoginReqParam* SSRegisterLoginReq::release_reqparam() {
  clear_has_reqparam();
  ::SSRegisterLoginReqParam* temp = reqparam_;
  reqparam_ = NULL;
  return temp;
}
inline void SSRegisterLoginReq::set_allocated_reqparam(::SSRegisterLoginReqParam* reqparam) {
  delete reqparam_;
  reqparam_ = reqparam;
  if (reqparam) {
    set_has_reqparam();
  } else {
    clear_has_reqparam();
  }
}

// -------------------------------------------------------------------

// SSRegisterLoginRsp

// optional int32 result = 1;
inline bool SSRegisterLoginRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSRegisterLoginRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSRegisterLoginRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSRegisterLoginRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SSRegisterLoginRsp::result() const {
  return result_;
}
inline void SSRegisterLoginRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required .SSRegisterLoginCmd cmd = 2;
inline bool SSRegisterLoginRsp::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSRegisterLoginRsp::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSRegisterLoginRsp::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSRegisterLoginRsp::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::SSRegisterLoginCmd SSRegisterLoginRsp::cmd() const {
  return static_cast< ::SSRegisterLoginCmd >(cmd_);
}
inline void SSRegisterLoginRsp::set_cmd(::SSRegisterLoginCmd value) {
  assert(::SSRegisterLoginCmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional .SSRegisterLoginRspParam rspParam = 3;
inline bool SSRegisterLoginRsp::has_rspparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSRegisterLoginRsp::set_has_rspparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSRegisterLoginRsp::clear_has_rspparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSRegisterLoginRsp::clear_rspparam() {
  if (rspparam_ != NULL) rspparam_->::SSRegisterLoginRspParam::Clear();
  clear_has_rspparam();
}
inline const ::SSRegisterLoginRspParam& SSRegisterLoginRsp::rspparam() const {
  return rspparam_ != NULL ? *rspparam_ : *default_instance_->rspparam_;
}
inline ::SSRegisterLoginRspParam* SSRegisterLoginRsp::mutable_rspparam() {
  set_has_rspparam();
  if (rspparam_ == NULL) rspparam_ = new ::SSRegisterLoginRspParam;
  return rspparam_;
}
inline ::SSRegisterLoginRspParam* SSRegisterLoginRsp::release_rspparam() {
  clear_has_rspparam();
  ::SSRegisterLoginRspParam* temp = rspparam_;
  rspparam_ = NULL;
  return temp;
}
inline void SSRegisterLoginRsp::set_allocated_rspparam(::SSRegisterLoginRspParam* rspparam) {
  delete rspparam_;
  rspparam_ = rspparam;
  if (rspparam) {
    set_has_rspparam();
  } else {
    clear_has_rspparam();
  }
}

// -------------------------------------------------------------------

// SSMsgBody

// optional .SSRegisterLoginReq RegisterLoginReq = 1;
inline bool SSMsgBody::has_registerloginreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSMsgBody::set_has_registerloginreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSMsgBody::clear_has_registerloginreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSMsgBody::clear_registerloginreq() {
  if (registerloginreq_ != NULL) registerloginreq_->::SSRegisterLoginReq::Clear();
  clear_has_registerloginreq();
}
inline const ::SSRegisterLoginReq& SSMsgBody::registerloginreq() const {
  return registerloginreq_ != NULL ? *registerloginreq_ : *default_instance_->registerloginreq_;
}
inline ::SSRegisterLoginReq* SSMsgBody::mutable_registerloginreq() {
  set_has_registerloginreq();
  if (registerloginreq_ == NULL) registerloginreq_ = new ::SSRegisterLoginReq;
  return registerloginreq_;
}
inline ::SSRegisterLoginReq* SSMsgBody::release_registerloginreq() {
  clear_has_registerloginreq();
  ::SSRegisterLoginReq* temp = registerloginreq_;
  registerloginreq_ = NULL;
  return temp;
}
inline void SSMsgBody::set_allocated_registerloginreq(::SSRegisterLoginReq* registerloginreq) {
  delete registerloginreq_;
  registerloginreq_ = registerloginreq;
  if (registerloginreq) {
    set_has_registerloginreq();
  } else {
    clear_has_registerloginreq();
  }
}

// optional .SSRegisterLoginRsp RegisterLoginRsp = 2;
inline bool SSMsgBody::has_registerloginrsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSMsgBody::set_has_registerloginrsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSMsgBody::clear_has_registerloginrsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSMsgBody::clear_registerloginrsp() {
  if (registerloginrsp_ != NULL) registerloginrsp_->::SSRegisterLoginRsp::Clear();
  clear_has_registerloginrsp();
}
inline const ::SSRegisterLoginRsp& SSMsgBody::registerloginrsp() const {
  return registerloginrsp_ != NULL ? *registerloginrsp_ : *default_instance_->registerloginrsp_;
}
inline ::SSRegisterLoginRsp* SSMsgBody::mutable_registerloginrsp() {
  set_has_registerloginrsp();
  if (registerloginrsp_ == NULL) registerloginrsp_ = new ::SSRegisterLoginRsp;
  return registerloginrsp_;
}
inline ::SSRegisterLoginRsp* SSMsgBody::release_registerloginrsp() {
  clear_has_registerloginrsp();
  ::SSRegisterLoginRsp* temp = registerloginrsp_;
  registerloginrsp_ = NULL;
  return temp;
}
inline void SSMsgBody::set_allocated_registerloginrsp(::SSRegisterLoginRsp* registerloginrsp) {
  delete registerloginrsp_;
  registerloginrsp_ = registerloginrsp;
  if (registerloginrsp) {
    set_has_registerloginrsp();
  } else {
    clear_has_registerloginrsp();
  }
}

// -------------------------------------------------------------------

// SSMsgHead

// required uint64 uid = 1;
inline bool SSMsgHead::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSMsgHead::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSMsgHead::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSMsgHead::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 SSMsgHead::uid() const {
  return uid_;
}
inline void SSMsgHead::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// required .SSMsgID msgID = 2;
inline bool SSMsgHead::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSMsgHead::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSMsgHead::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSMsgHead::clear_msgid() {
  msgid_ = 1000;
  clear_has_msgid();
}
inline ::SSMsgID SSMsgHead::msgid() const {
  return static_cast< ::SSMsgID >(msgid_);
}
inline void SSMsgHead::set_msgid(::SSMsgID value) {
  assert(::SSMsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// SSMsg

// required .SSMsgHead head = 1;
inline bool SSMsg::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSMsg::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSMsg::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSMsg::clear_head() {
  if (head_ != NULL) head_->::SSMsgHead::Clear();
  clear_has_head();
}
inline const ::SSMsgHead& SSMsg::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::SSMsgHead* SSMsg::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::SSMsgHead;
  return head_;
}
inline ::SSMsgHead* SSMsg::release_head() {
  clear_has_head();
  ::SSMsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void SSMsg::set_allocated_head(::SSMsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// required .SSMsgBody body = 2;
inline bool SSMsg::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSMsg::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSMsg::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSMsg::clear_body() {
  if (body_ != NULL) body_->::SSMsgBody::Clear();
  clear_has_body();
}
inline const ::SSMsgBody& SSMsg::body() const {
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::SSMsgBody* SSMsg::mutable_body() {
  set_has_body();
  if (body_ == NULL) body_ = new ::SSMsgBody;
  return body_;
}
inline ::SSMsgBody* SSMsg::release_body() {
  clear_has_body();
  ::SSMsgBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline void SSMsg::set_allocated_body(::SSMsgBody* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSRegisterLoginCmd>() {
  return ::SSRegisterLoginCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSMsgID>() {
  return ::SSMsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SSmsg_2eproto__INCLUDED
