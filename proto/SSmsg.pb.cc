// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SSmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SSmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSRegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSRegisterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSQuitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSQuitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSRegisterLoginReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSRegisterLoginReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSRegisterLoginRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSRegisterLoginRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSRegisterLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSRegisterLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSRegisterLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSRegisterLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSMsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSMsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSMsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSMsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SSRegisterLoginCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SSMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SSmsg_2eproto() {
  protobuf_AddDesc_SSmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SSmsg.proto");
  GOOGLE_CHECK(file != NULL);
  SSLoginReq_descriptor_ = file->message_type(0);
  static const int SSLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginReq, password_),
  };
  SSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSLoginReq_descriptor_,
      SSLoginReq::default_instance_,
      SSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSLoginReq));
  SSLoginRsp_descriptor_ = file->message_type(1);
  static const int SSLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginRsp, role_),
  };
  SSLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSLoginRsp_descriptor_,
      SSLoginRsp::default_instance_,
      SSLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSLoginRsp));
  SSRegisterReq_descriptor_ = file->message_type(2);
  static const int SSRegisterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterReq, name_),
  };
  SSRegisterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSRegisterReq_descriptor_,
      SSRegisterReq::default_instance_,
      SSRegisterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSRegisterReq));
  SSRegisterRsp_descriptor_ = file->message_type(3);
  static const int SSRegisterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterRsp, name_),
  };
  SSRegisterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSRegisterRsp_descriptor_,
      SSRegisterRsp::default_instance_,
      SSRegisterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSRegisterRsp));
  SSQuitReq_descriptor_ = file->message_type(4);
  static const int SSQuitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSQuitReq, role_),
  };
  SSQuitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSQuitReq_descriptor_,
      SSQuitReq::default_instance_,
      SSQuitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSQuitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSQuitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSQuitReq));
  SSRegisterLoginReqParam_descriptor_ = file->message_type(5);
  static const int SSRegisterLoginReqParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReqParam, loginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReqParam, registerreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReqParam, quitreq_),
  };
  SSRegisterLoginReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSRegisterLoginReqParam_descriptor_,
      SSRegisterLoginReqParam::default_instance_,
      SSRegisterLoginReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSRegisterLoginReqParam));
  SSRegisterLoginRspParam_descriptor_ = file->message_type(6);
  static const int SSRegisterLoginRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRspParam, loginrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRspParam, registerrsp_),
  };
  SSRegisterLoginRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSRegisterLoginRspParam_descriptor_,
      SSRegisterLoginRspParam::default_instance_,
      SSRegisterLoginRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSRegisterLoginRspParam));
  SSRegisterLoginReq_descriptor_ = file->message_type(7);
  static const int SSRegisterLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReq, reqparam_),
  };
  SSRegisterLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSRegisterLoginReq_descriptor_,
      SSRegisterLoginReq::default_instance_,
      SSRegisterLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSRegisterLoginReq));
  SSRegisterLoginRsp_descriptor_ = file->message_type(8);
  static const int SSRegisterLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRsp, rspparam_),
  };
  SSRegisterLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSRegisterLoginRsp_descriptor_,
      SSRegisterLoginRsp::default_instance_,
      SSRegisterLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSRegisterLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSRegisterLoginRsp));
  SSMsgBody_descriptor_ = file->message_type(9);
  static const int SSMsgBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgBody, registerloginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgBody, registerloginrsp_),
  };
  SSMsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSMsgBody_descriptor_,
      SSMsgBody::default_instance_,
      SSMsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSMsgBody));
  SSMsgHead_descriptor_ = file->message_type(10);
  static const int SSMsgHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgHead, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgHead, msgid_),
  };
  SSMsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSMsgHead_descriptor_,
      SSMsgHead::default_instance_,
      SSMsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSMsgHead));
  SSMsg_descriptor_ = file->message_type(11);
  static const int SSMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsg, body_),
  };
  SSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSMsg_descriptor_,
      SSMsg::default_instance_,
      SSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSMsg));
  SSRegisterLoginCmd_descriptor_ = file->enum_type(0);
  SSMsgID_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SSmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSLoginReq_descriptor_, &SSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSLoginRsp_descriptor_, &SSLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSRegisterReq_descriptor_, &SSRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSRegisterRsp_descriptor_, &SSRegisterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSQuitReq_descriptor_, &SSQuitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSRegisterLoginReqParam_descriptor_, &SSRegisterLoginReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSRegisterLoginRspParam_descriptor_, &SSRegisterLoginRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSRegisterLoginReq_descriptor_, &SSRegisterLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSRegisterLoginRsp_descriptor_, &SSRegisterLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSMsgBody_descriptor_, &SSMsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSMsgHead_descriptor_, &SSMsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSMsg_descriptor_, &SSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SSmsg_2eproto() {
  delete SSLoginReq::default_instance_;
  delete SSLoginReq_reflection_;
  delete SSLoginRsp::default_instance_;
  delete SSLoginRsp_reflection_;
  delete SSRegisterReq::default_instance_;
  delete SSRegisterReq_reflection_;
  delete SSRegisterRsp::default_instance_;
  delete SSRegisterRsp_reflection_;
  delete SSQuitReq::default_instance_;
  delete SSQuitReq_reflection_;
  delete SSRegisterLoginReqParam::default_instance_;
  delete SSRegisterLoginReqParam_reflection_;
  delete SSRegisterLoginRspParam::default_instance_;
  delete SSRegisterLoginRspParam_reflection_;
  delete SSRegisterLoginReq::default_instance_;
  delete SSRegisterLoginReq_reflection_;
  delete SSRegisterLoginRsp::default_instance_;
  delete SSRegisterLoginRsp_reflection_;
  delete SSMsgBody::default_instance_;
  delete SSMsgBody_reflection_;
  delete SSMsgHead::default_instance_;
  delete SSMsgHead_reflection_;
  delete SSMsg::default_instance_;
  delete SSMsg_reflection_;
}

void protobuf_AddDesc_SSmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DBmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013SSmsg.proto\032\013DBmsg.proto\"/\n\nSSLoginReq"
    "\022\017\n\007account\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"5\n\nS"
    "SLoginRsp\022\014\n\004type\030\001 \001(\r\022\031\n\004Role\030\002 \001(\0132\013."
    "DBRoleInfo\"@\n\rSSRegisterReq\022\017\n\007account\030\001"
    " \001(\t\022\020\n\010password\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"8\n\r"
    "SSRegisterRsp\022\014\n\004type\030\001 \001(\r\022\013\n\003uid\030\002 \001(\004"
    "\022\014\n\004name\030\003 \001(\t\"&\n\tSSQuitReq\022\031\n\004Role\030\001 \001("
    "\0132\013.DBRoleInfo\"z\n\027SSRegisterLoginReqPara"
    "m\022\035\n\010LoginReq\030\001 \001(\0132\013.SSLoginReq\022#\n\013Regi"
    "sterReq\030\002 \001(\0132\016.SSRegisterReq\022\033\n\007QuitReq"
    "\030\003 \001(\0132\n.SSQuitReq\"]\n\027SSRegisterLoginRsp"
    "Param\022\035\n\010LoginRsp\030\001 \001(\0132\013.SSLoginRsp\022#\n\013"
    "RegisterRsp\030\002 \001(\0132\016.SSRegisterRsp\"b\n\022SSR"
    "egisterLoginReq\022 \n\003cmd\030\001 \002(\0162\023.SSRegiste"
    "rLoginCmd\022*\n\010reqParam\030\002 \001(\0132\030.SSRegister"
    "LoginReqParam\"r\n\022SSRegisterLoginRsp\022\016\n\006r"
    "esult\030\001 \001(\005\022 \n\003cmd\030\002 \002(\0162\023.SSRegisterLog"
    "inCmd\022*\n\010rspParam\030\003 \001(\0132\030.SSRegisterLogi"
    "nRspParam\"i\n\tSSMsgBody\022-\n\020RegisterLoginR"
    "eq\030\001 \001(\0132\023.SSRegisterLoginReq\022-\n\020Registe"
    "rLoginRsp\030\002 \001(\0132\023.SSRegisterLoginRsp\"1\n\t"
    "SSMsgHead\022\013\n\003uid\030\001 \002(\004\022\027\n\005msgID\030\002 \002(\0162\010."
    "SSMsgID\";\n\005SSMsg\022\030\n\004head\030\001 \002(\0132\n.SSMsgHe"
    "ad\022\030\n\004body\030\002 \002(\0132\n.SSMsgBody*\227\001\n\022SSRegis"
    "terLoginCmd\022\037\n\033SSRegisterLoginCmd_Regist"
    "er\020\001\022\034\n\030SSRegisterLoginCmd_Login\020\002\022\033\n\027SS"
    "RegisterLoginCmd_Quit\020\003\022%\n!SSRegisterLog"
    "inCmd_UpdateDatabase\020\004*H\n\007SSMsgID\022\021\n\014SS_"
    "MSGID_MIN\020\350\007\022\027\n\022SS_MSGID_GameMysql\020\351\007\022\021\n"
    "\014SS_MSGID_MAX\020\352\007", 1176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SSmsg.proto", &protobuf_RegisterTypes);
  SSLoginReq::default_instance_ = new SSLoginReq();
  SSLoginRsp::default_instance_ = new SSLoginRsp();
  SSRegisterReq::default_instance_ = new SSRegisterReq();
  SSRegisterRsp::default_instance_ = new SSRegisterRsp();
  SSQuitReq::default_instance_ = new SSQuitReq();
  SSRegisterLoginReqParam::default_instance_ = new SSRegisterLoginReqParam();
  SSRegisterLoginRspParam::default_instance_ = new SSRegisterLoginRspParam();
  SSRegisterLoginReq::default_instance_ = new SSRegisterLoginReq();
  SSRegisterLoginRsp::default_instance_ = new SSRegisterLoginRsp();
  SSMsgBody::default_instance_ = new SSMsgBody();
  SSMsgHead::default_instance_ = new SSMsgHead();
  SSMsg::default_instance_ = new SSMsg();
  SSLoginReq::default_instance_->InitAsDefaultInstance();
  SSLoginRsp::default_instance_->InitAsDefaultInstance();
  SSRegisterReq::default_instance_->InitAsDefaultInstance();
  SSRegisterRsp::default_instance_->InitAsDefaultInstance();
  SSQuitReq::default_instance_->InitAsDefaultInstance();
  SSRegisterLoginReqParam::default_instance_->InitAsDefaultInstance();
  SSRegisterLoginRspParam::default_instance_->InitAsDefaultInstance();
  SSRegisterLoginReq::default_instance_->InitAsDefaultInstance();
  SSRegisterLoginRsp::default_instance_->InitAsDefaultInstance();
  SSMsgBody::default_instance_->InitAsDefaultInstance();
  SSMsgHead::default_instance_->InitAsDefaultInstance();
  SSMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SSmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SSmsg_2eproto {
  StaticDescriptorInitializer_SSmsg_2eproto() {
    protobuf_AddDesc_SSmsg_2eproto();
  }
} static_descriptor_initializer_SSmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* SSRegisterLoginCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterLoginCmd_descriptor_;
}
bool SSRegisterLoginCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SSMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSMsgID_descriptor_;
}
bool SSMsgID_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SSLoginReq::kAccountFieldNumber;
const int SSLoginReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

SSLoginReq::SSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSLoginReq::InitAsDefaultInstance() {
}

SSLoginReq::SSLoginReq(const SSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSLoginReq::~SSLoginReq() {
  SharedDtor();
}

void SSLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSLoginReq_descriptor_;
}

const SSLoginReq& SSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSLoginReq* SSLoginReq::default_instance_ = NULL;

SSLoginReq* SSLoginReq::New() const {
  return new SSLoginReq;
}

void SSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSLoginReq::MergeFrom(const SSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSLoginReq::CopyFrom(const SSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLoginReq::IsInitialized() const {

  return true;
}

void SSLoginReq::Swap(SSLoginReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSLoginReq_descriptor_;
  metadata.reflection = SSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSLoginRsp::kTypeFieldNumber;
const int SSLoginRsp::kRoleFieldNumber;
#endif  // !_MSC_VER

SSLoginRsp::SSLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSLoginRsp::InitAsDefaultInstance() {
  role_ = const_cast< ::DBRoleInfo*>(&::DBRoleInfo::default_instance());
}

SSLoginRsp::SSLoginRsp(const SSLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSLoginRsp::~SSLoginRsp() {
  SharedDtor();
}

void SSLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void SSLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSLoginRsp_descriptor_;
}

const SSLoginRsp& SSLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSLoginRsp* SSLoginRsp::default_instance_ = NULL;

SSLoginRsp* SSLoginRsp::New() const {
  return new SSLoginRsp;
}

void SSLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_role()) {
      if (role_ != NULL) role_->::DBRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Role;
        break;
      }

      // optional .DBRoleInfo Role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .DBRoleInfo Role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .DBRoleInfo Role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .DBRoleInfo Role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSLoginRsp::MergeFrom(const SSLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role()) {
      mutable_role()->::DBRoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSLoginRsp::CopyFrom(const SSLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLoginRsp::IsInitialized() const {

  return true;
}

void SSLoginRsp::Swap(SSLoginRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSLoginRsp_descriptor_;
  metadata.reflection = SSLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSRegisterReq::kAccountFieldNumber;
const int SSRegisterReq::kPasswordFieldNumber;
const int SSRegisterReq::kNameFieldNumber;
#endif  // !_MSC_VER

SSRegisterReq::SSRegisterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSRegisterReq::InitAsDefaultInstance() {
}

SSRegisterReq::SSRegisterReq(const SSRegisterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSRegisterReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSRegisterReq::~SSRegisterReq() {
  SharedDtor();
}

void SSRegisterReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SSRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterReq_descriptor_;
}

const SSRegisterReq& SSRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSRegisterReq* SSRegisterReq::default_instance_ = NULL;

SSRegisterReq* SSRegisterReq::New() const {
  return new SSRegisterReq;
}

void SSRegisterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSRegisterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSRegisterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSRegisterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSRegisterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSRegisterReq::MergeFrom(const SSRegisterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSRegisterReq::CopyFrom(const SSRegisterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSRegisterReq::IsInitialized() const {

  return true;
}

void SSRegisterReq::Swap(SSRegisterReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSRegisterReq_descriptor_;
  metadata.reflection = SSRegisterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSRegisterRsp::kTypeFieldNumber;
const int SSRegisterRsp::kUidFieldNumber;
const int SSRegisterRsp::kNameFieldNumber;
#endif  // !_MSC_VER

SSRegisterRsp::SSRegisterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSRegisterRsp::InitAsDefaultInstance() {
}

SSRegisterRsp::SSRegisterRsp(const SSRegisterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSRegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSRegisterRsp::~SSRegisterRsp() {
  SharedDtor();
}

void SSRegisterRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SSRegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSRegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterRsp_descriptor_;
}

const SSRegisterRsp& SSRegisterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSRegisterRsp* SSRegisterRsp::default_instance_ = NULL;

SSRegisterRsp* SSRegisterRsp::New() const {
  return new SSRegisterRsp;
}

void SSRegisterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSRegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSRegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSRegisterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSRegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSRegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSRegisterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSRegisterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSRegisterRsp::MergeFrom(const SSRegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSRegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSRegisterRsp::CopyFrom(const SSRegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSRegisterRsp::IsInitialized() const {

  return true;
}

void SSRegisterRsp::Swap(SSRegisterRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSRegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSRegisterRsp_descriptor_;
  metadata.reflection = SSRegisterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSQuitReq::kRoleFieldNumber;
#endif  // !_MSC_VER

SSQuitReq::SSQuitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSQuitReq::InitAsDefaultInstance() {
  role_ = const_cast< ::DBRoleInfo*>(&::DBRoleInfo::default_instance());
}

SSQuitReq::SSQuitReq(const SSQuitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSQuitReq::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSQuitReq::~SSQuitReq() {
  SharedDtor();
}

void SSQuitReq::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void SSQuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSQuitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSQuitReq_descriptor_;
}

const SSQuitReq& SSQuitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSQuitReq* SSQuitReq::default_instance_ = NULL;

SSQuitReq* SSQuitReq::New() const {
  return new SSQuitReq;
}

void SSQuitReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role()) {
      if (role_ != NULL) role_->::DBRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSQuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBRoleInfo Role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSQuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DBRoleInfo Role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSQuitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DBRoleInfo Role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSQuitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBRoleInfo Role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSQuitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSQuitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSQuitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSQuitReq::MergeFrom(const SSQuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::DBRoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSQuitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSQuitReq::CopyFrom(const SSQuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSQuitReq::IsInitialized() const {

  return true;
}

void SSQuitReq::Swap(SSQuitReq* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSQuitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSQuitReq_descriptor_;
  metadata.reflection = SSQuitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSRegisterLoginReqParam::kLoginReqFieldNumber;
const int SSRegisterLoginReqParam::kRegisterReqFieldNumber;
const int SSRegisterLoginReqParam::kQuitReqFieldNumber;
#endif  // !_MSC_VER

SSRegisterLoginReqParam::SSRegisterLoginReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSRegisterLoginReqParam::InitAsDefaultInstance() {
  loginreq_ = const_cast< ::SSLoginReq*>(&::SSLoginReq::default_instance());
  registerreq_ = const_cast< ::SSRegisterReq*>(&::SSRegisterReq::default_instance());
  quitreq_ = const_cast< ::SSQuitReq*>(&::SSQuitReq::default_instance());
}

SSRegisterLoginReqParam::SSRegisterLoginReqParam(const SSRegisterLoginReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSRegisterLoginReqParam::SharedCtor() {
  _cached_size_ = 0;
  loginreq_ = NULL;
  registerreq_ = NULL;
  quitreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSRegisterLoginReqParam::~SSRegisterLoginReqParam() {
  SharedDtor();
}

void SSRegisterLoginReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginreq_;
    delete registerreq_;
    delete quitreq_;
  }
}

void SSRegisterLoginReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSRegisterLoginReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterLoginReqParam_descriptor_;
}

const SSRegisterLoginReqParam& SSRegisterLoginReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSRegisterLoginReqParam* SSRegisterLoginReqParam::default_instance_ = NULL;

SSRegisterLoginReqParam* SSRegisterLoginReqParam::New() const {
  return new SSRegisterLoginReqParam;
}

void SSRegisterLoginReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginreq()) {
      if (loginreq_ != NULL) loginreq_->::SSLoginReq::Clear();
    }
    if (has_registerreq()) {
      if (registerreq_ != NULL) registerreq_->::SSRegisterReq::Clear();
    }
    if (has_quitreq()) {
      if (quitreq_ != NULL) quitreq_->::SSQuitReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSRegisterLoginReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSLoginReq LoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterReq;
        break;
      }

      // optional .SSRegisterReq RegisterReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_QuitReq;
        break;
      }

      // optional .SSQuitReq QuitReq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuitReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSRegisterLoginReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginreq(), output);
  }

  // optional .SSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerreq(), output);
  }

  // optional .SSQuitReq QuitReq = 3;
  if (has_quitreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quitreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSRegisterLoginReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginreq(), target);
  }

  // optional .SSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerreq(), target);
  }

  // optional .SSQuitReq QuitReq = 3;
  if (has_quitreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quitreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSRegisterLoginReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSLoginReq LoginReq = 1;
    if (has_loginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginreq());
    }

    // optional .SSRegisterReq RegisterReq = 2;
    if (has_registerreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerreq());
    }

    // optional .SSQuitReq QuitReq = 3;
    if (has_quitreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quitreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSRegisterLoginReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSRegisterLoginReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSRegisterLoginReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSRegisterLoginReqParam::MergeFrom(const SSRegisterLoginReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginreq()) {
      mutable_loginreq()->::SSLoginReq::MergeFrom(from.loginreq());
    }
    if (from.has_registerreq()) {
      mutable_registerreq()->::SSRegisterReq::MergeFrom(from.registerreq());
    }
    if (from.has_quitreq()) {
      mutable_quitreq()->::SSQuitReq::MergeFrom(from.quitreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSRegisterLoginReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSRegisterLoginReqParam::CopyFrom(const SSRegisterLoginReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSRegisterLoginReqParam::IsInitialized() const {

  return true;
}

void SSRegisterLoginReqParam::Swap(SSRegisterLoginReqParam* other) {
  if (other != this) {
    std::swap(loginreq_, other->loginreq_);
    std::swap(registerreq_, other->registerreq_);
    std::swap(quitreq_, other->quitreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSRegisterLoginReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSRegisterLoginReqParam_descriptor_;
  metadata.reflection = SSRegisterLoginReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSRegisterLoginRspParam::kLoginRspFieldNumber;
const int SSRegisterLoginRspParam::kRegisterRspFieldNumber;
#endif  // !_MSC_VER

SSRegisterLoginRspParam::SSRegisterLoginRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSRegisterLoginRspParam::InitAsDefaultInstance() {
  loginrsp_ = const_cast< ::SSLoginRsp*>(&::SSLoginRsp::default_instance());
  registerrsp_ = const_cast< ::SSRegisterRsp*>(&::SSRegisterRsp::default_instance());
}

SSRegisterLoginRspParam::SSRegisterLoginRspParam(const SSRegisterLoginRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSRegisterLoginRspParam::SharedCtor() {
  _cached_size_ = 0;
  loginrsp_ = NULL;
  registerrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSRegisterLoginRspParam::~SSRegisterLoginRspParam() {
  SharedDtor();
}

void SSRegisterLoginRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginrsp_;
    delete registerrsp_;
  }
}

void SSRegisterLoginRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSRegisterLoginRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterLoginRspParam_descriptor_;
}

const SSRegisterLoginRspParam& SSRegisterLoginRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSRegisterLoginRspParam* SSRegisterLoginRspParam::default_instance_ = NULL;

SSRegisterLoginRspParam* SSRegisterLoginRspParam::New() const {
  return new SSRegisterLoginRspParam;
}

void SSRegisterLoginRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginrsp()) {
      if (loginrsp_ != NULL) loginrsp_->::SSLoginRsp::Clear();
    }
    if (has_registerrsp()) {
      if (registerrsp_ != NULL) registerrsp_->::SSRegisterRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSRegisterLoginRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSLoginRsp LoginRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterRsp;
        break;
      }

      // optional .SSRegisterRsp RegisterRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSRegisterLoginRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginrsp(), output);
  }

  // optional .SSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSRegisterLoginRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginrsp(), target);
  }

  // optional .SSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSRegisterLoginRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSLoginRsp LoginRsp = 1;
    if (has_loginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginrsp());
    }

    // optional .SSRegisterRsp RegisterRsp = 2;
    if (has_registerrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSRegisterLoginRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSRegisterLoginRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSRegisterLoginRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSRegisterLoginRspParam::MergeFrom(const SSRegisterLoginRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginrsp()) {
      mutable_loginrsp()->::SSLoginRsp::MergeFrom(from.loginrsp());
    }
    if (from.has_registerrsp()) {
      mutable_registerrsp()->::SSRegisterRsp::MergeFrom(from.registerrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSRegisterLoginRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSRegisterLoginRspParam::CopyFrom(const SSRegisterLoginRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSRegisterLoginRspParam::IsInitialized() const {

  return true;
}

void SSRegisterLoginRspParam::Swap(SSRegisterLoginRspParam* other) {
  if (other != this) {
    std::swap(loginrsp_, other->loginrsp_);
    std::swap(registerrsp_, other->registerrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSRegisterLoginRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSRegisterLoginRspParam_descriptor_;
  metadata.reflection = SSRegisterLoginRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSRegisterLoginReq::kCmdFieldNumber;
const int SSRegisterLoginReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

SSRegisterLoginReq::SSRegisterLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSRegisterLoginReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::SSRegisterLoginReqParam*>(&::SSRegisterLoginReqParam::default_instance());
}

SSRegisterLoginReq::SSRegisterLoginReq(const SSRegisterLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSRegisterLoginReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSRegisterLoginReq::~SSRegisterLoginReq() {
  SharedDtor();
}

void SSRegisterLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void SSRegisterLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSRegisterLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterLoginReq_descriptor_;
}

const SSRegisterLoginReq& SSRegisterLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSRegisterLoginReq* SSRegisterLoginReq::default_instance_ = NULL;

SSRegisterLoginReq* SSRegisterLoginReq::New() const {
  return new SSRegisterLoginReq;
}

void SSRegisterLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::SSRegisterLoginReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSRegisterLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSRegisterLoginCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::SSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .SSRegisterLoginReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSRegisterLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .SSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSRegisterLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .SSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSRegisterLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSRegisterLoginCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .SSRegisterLoginReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSRegisterLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSRegisterLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSRegisterLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSRegisterLoginReq::MergeFrom(const SSRegisterLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::SSRegisterLoginReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSRegisterLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSRegisterLoginReq::CopyFrom(const SSRegisterLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSRegisterLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SSRegisterLoginReq::Swap(SSRegisterLoginReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSRegisterLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSRegisterLoginReq_descriptor_;
  metadata.reflection = SSRegisterLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSRegisterLoginRsp::kResultFieldNumber;
const int SSRegisterLoginRsp::kCmdFieldNumber;
const int SSRegisterLoginRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

SSRegisterLoginRsp::SSRegisterLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSRegisterLoginRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::SSRegisterLoginRspParam*>(&::SSRegisterLoginRspParam::default_instance());
}

SSRegisterLoginRsp::SSRegisterLoginRsp(const SSRegisterLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSRegisterLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSRegisterLoginRsp::~SSRegisterLoginRsp() {
  SharedDtor();
}

void SSRegisterLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void SSRegisterLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSRegisterLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSRegisterLoginRsp_descriptor_;
}

const SSRegisterLoginRsp& SSRegisterLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSRegisterLoginRsp* SSRegisterLoginRsp::default_instance_ = NULL;

SSRegisterLoginRsp* SSRegisterLoginRsp::New() const {
  return new SSRegisterLoginRsp;
}

void SSRegisterLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::SSRegisterLoginRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSRegisterLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .SSRegisterLoginCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::SSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .SSRegisterLoginRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSRegisterLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .SSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .SSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSRegisterLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .SSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .SSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSRegisterLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .SSRegisterLoginCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .SSRegisterLoginRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSRegisterLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSRegisterLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSRegisterLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSRegisterLoginRsp::MergeFrom(const SSRegisterLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::SSRegisterLoginRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSRegisterLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSRegisterLoginRsp::CopyFrom(const SSRegisterLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSRegisterLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void SSRegisterLoginRsp::Swap(SSRegisterLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSRegisterLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSRegisterLoginRsp_descriptor_;
  metadata.reflection = SSRegisterLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSMsgBody::kRegisterLoginReqFieldNumber;
const int SSMsgBody::kRegisterLoginRspFieldNumber;
#endif  // !_MSC_VER

SSMsgBody::SSMsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSMsgBody::InitAsDefaultInstance() {
  registerloginreq_ = const_cast< ::SSRegisterLoginReq*>(&::SSRegisterLoginReq::default_instance());
  registerloginrsp_ = const_cast< ::SSRegisterLoginRsp*>(&::SSRegisterLoginRsp::default_instance());
}

SSMsgBody::SSMsgBody(const SSMsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSMsgBody::SharedCtor() {
  _cached_size_ = 0;
  registerloginreq_ = NULL;
  registerloginrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSMsgBody::~SSMsgBody() {
  SharedDtor();
}

void SSMsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete registerloginreq_;
    delete registerloginrsp_;
  }
}

void SSMsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSMsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSMsgBody_descriptor_;
}

const SSMsgBody& SSMsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSMsgBody* SSMsgBody::default_instance_ = NULL;

SSMsgBody* SSMsgBody::New() const {
  return new SSMsgBody;
}

void SSMsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_registerloginreq()) {
      if (registerloginreq_ != NULL) registerloginreq_->::SSRegisterLoginReq::Clear();
    }
    if (has_registerloginrsp()) {
      if (registerloginrsp_ != NULL) registerloginrsp_->::SSRegisterLoginRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSMsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSRegisterLoginReq RegisterLoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterLoginRsp;
        break;
      }

      // optional .SSRegisterLoginRsp RegisterLoginRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterLoginRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSMsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->registerloginreq(), output);
  }

  // optional .SSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerloginrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSMsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->registerloginreq(), target);
  }

  // optional .SSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerloginrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSMsgBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSRegisterLoginReq RegisterLoginReq = 1;
    if (has_registerloginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginreq());
    }

    // optional .SSRegisterLoginRsp RegisterLoginRsp = 2;
    if (has_registerloginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSMsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSMsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSMsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSMsgBody::MergeFrom(const SSMsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registerloginreq()) {
      mutable_registerloginreq()->::SSRegisterLoginReq::MergeFrom(from.registerloginreq());
    }
    if (from.has_registerloginrsp()) {
      mutable_registerloginrsp()->::SSRegisterLoginRsp::MergeFrom(from.registerloginrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSMsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSMsgBody::CopyFrom(const SSMsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSMsgBody::IsInitialized() const {

  if (has_registerloginreq()) {
    if (!this->registerloginreq().IsInitialized()) return false;
  }
  if (has_registerloginrsp()) {
    if (!this->registerloginrsp().IsInitialized()) return false;
  }
  return true;
}

void SSMsgBody::Swap(SSMsgBody* other) {
  if (other != this) {
    std::swap(registerloginreq_, other->registerloginreq_);
    std::swap(registerloginrsp_, other->registerloginrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSMsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSMsgBody_descriptor_;
  metadata.reflection = SSMsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSMsgHead::kUidFieldNumber;
const int SSMsgHead::kMsgIDFieldNumber;
#endif  // !_MSC_VER

SSMsgHead::SSMsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSMsgHead::InitAsDefaultInstance() {
}

SSMsgHead::SSMsgHead(const SSMsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSMsgHead::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSMsgHead::~SSMsgHead() {
  SharedDtor();
}

void SSMsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSMsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSMsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSMsgHead_descriptor_;
}

const SSMsgHead& SSMsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSMsgHead* SSMsgHead::default_instance_ = NULL;

SSMsgHead* SSMsgHead::New() const {
  return new SSMsgHead;
}

void SSMsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    msgid_ = 1000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSMsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgID;
        break;
      }

      // required .SSMsgID msgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSMsgID_IsValid(value)) {
            set_msgid(static_cast< ::SSMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSMsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required .SSMsgID msgID = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSMsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required .SSMsgID msgID = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSMsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required .SSMsgID msgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSMsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSMsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSMsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSMsgHead::MergeFrom(const SSMsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSMsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSMsgHead::CopyFrom(const SSMsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSMsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SSMsgHead::Swap(SSMsgHead* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSMsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSMsgHead_descriptor_;
  metadata.reflection = SSMsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSMsg::kHeadFieldNumber;
const int SSMsg::kBodyFieldNumber;
#endif  // !_MSC_VER

SSMsg::SSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSMsg::InitAsDefaultInstance() {
  head_ = const_cast< ::SSMsgHead*>(&::SSMsgHead::default_instance());
  body_ = const_cast< ::SSMsgBody*>(&::SSMsgBody::default_instance());
}

SSMsg::SSMsg(const SSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSMsg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSMsg::~SSMsg() {
  SharedDtor();
}

void SSMsg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete body_;
  }
}

void SSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSMsg_descriptor_;
}

const SSMsg& SSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSmsg_2eproto();
  return *default_instance_;
}

SSMsg* SSMsg::default_instance_ = NULL;

SSMsg* SSMsg::New() const {
  return new SSMsg;
}

void SSMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::SSMsgHead::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::SSMsgBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSMsgHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .SSMsgBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSMsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .SSMsgBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSMsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .SSMsgBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSMsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .SSMsgBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSMsg::MergeFrom(const SSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::SSMsgHead::MergeFrom(from.head());
    }
    if (from.has_body()) {
      mutable_body()->::SSMsgBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSMsg::CopyFrom(const SSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void SSMsg::Swap(SSMsg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSMsg_descriptor_;
  metadata.reflection = SSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
