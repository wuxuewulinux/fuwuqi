// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginReqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginReqParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginRspParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginRspParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegisterLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegisterLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CSRegisterLoginCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CSMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSmsg_2eproto() {
  protobuf_AddDesc_CSmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSmsg.proto");
  GOOGLE_CHECK(file != NULL);
  CSLoginReq_descriptor_ = file->message_type(0);
  static const int CSLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, password_),
  };
  CSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginReq_descriptor_,
      CSLoginReq::default_instance_,
      CSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginReq));
  CSLoginRsp_descriptor_ = file->message_type(1);
  static const int CSLoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, type_),
  };
  CSLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginRsp_descriptor_,
      CSLoginRsp::default_instance_,
      CSLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginRsp));
  CSRegisterReq_descriptor_ = file->message_type(2);
  static const int CSRegisterReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, sex_),
  };
  CSRegisterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterReq_descriptor_,
      CSRegisterReq::default_instance_,
      CSRegisterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterReq));
  CSRegisterRsp_descriptor_ = file->message_type(3);
  static const int CSRegisterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, type_),
  };
  CSRegisterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterRsp_descriptor_,
      CSRegisterRsp::default_instance_,
      CSRegisterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterRsp));
  CSRegisterLoginReqParam_descriptor_ = file->message_type(4);
  static const int CSRegisterLoginReqParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, loginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, registerreq_),
  };
  CSRegisterLoginReqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginReqParam_descriptor_,
      CSRegisterLoginReqParam::default_instance_,
      CSRegisterLoginReqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginReqParam));
  CSRegisterLoginRspParam_descriptor_ = file->message_type(5);
  static const int CSRegisterLoginRspParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, loginrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, registerrsp_),
  };
  CSRegisterLoginRspParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginRspParam_descriptor_,
      CSRegisterLoginRspParam::default_instance_,
      CSRegisterLoginRspParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRspParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginRspParam));
  CSRegisterLoginReq_descriptor_ = file->message_type(6);
  static const int CSRegisterLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, reqparam_),
  };
  CSRegisterLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginReq_descriptor_,
      CSRegisterLoginReq::default_instance_,
      CSRegisterLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginReq));
  CSRegisterLoginRsp_descriptor_ = file->message_type(7);
  static const int CSRegisterLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, rspparam_),
  };
  CSRegisterLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegisterLoginRsp_descriptor_,
      CSRegisterLoginRsp::default_instance_,
      CSRegisterLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegisterLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegisterLoginRsp));
  CSMsgBody_descriptor_ = file->message_type(8);
  static const int CSMsgBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, registerloginreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, registerloginrsp_),
  };
  CSMsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgBody_descriptor_,
      CSMsgBody::default_instance_,
      CSMsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgBody));
  CSMsgHead_descriptor_ = file->message_type(9);
  static const int CSMsgHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, msgid_),
  };
  CSMsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgHead_descriptor_,
      CSMsgHead::default_instance_,
      CSMsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgHead));
  CSMsg_descriptor_ = file->message_type(10);
  static const int CSMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, body_),
  };
  CSMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsg_descriptor_,
      CSMsg::default_instance_,
      CSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsg));
  CSRegisterLoginCmd_descriptor_ = file->enum_type(0);
  CSMsgID_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginReq_descriptor_, &CSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginRsp_descriptor_, &CSLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterReq_descriptor_, &CSRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterRsp_descriptor_, &CSRegisterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginReqParam_descriptor_, &CSRegisterLoginReqParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginRspParam_descriptor_, &CSRegisterLoginRspParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginReq_descriptor_, &CSRegisterLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegisterLoginRsp_descriptor_, &CSRegisterLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgBody_descriptor_, &CSMsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgHead_descriptor_, &CSMsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsg_descriptor_, &CSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSmsg_2eproto() {
  delete CSLoginReq::default_instance_;
  delete CSLoginReq_reflection_;
  delete CSLoginRsp::default_instance_;
  delete CSLoginRsp_reflection_;
  delete CSRegisterReq::default_instance_;
  delete CSRegisterReq_reflection_;
  delete CSRegisterRsp::default_instance_;
  delete CSRegisterRsp_reflection_;
  delete CSRegisterLoginReqParam::default_instance_;
  delete CSRegisterLoginReqParam_reflection_;
  delete CSRegisterLoginRspParam::default_instance_;
  delete CSRegisterLoginRspParam_reflection_;
  delete CSRegisterLoginReq::default_instance_;
  delete CSRegisterLoginReq_reflection_;
  delete CSRegisterLoginRsp::default_instance_;
  delete CSRegisterLoginRsp_reflection_;
  delete CSMsgBody::default_instance_;
  delete CSMsgBody_reflection_;
  delete CSMsgHead::default_instance_;
  delete CSMsgHead_reflection_;
  delete CSMsg::default_instance_;
  delete CSMsg_reflection_;
}

void protobuf_AddDesc_CSmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013CSmsg.proto\"/\n\nCSLoginReq\022\017\n\007account\030\001"
    " \001(\t\022\020\n\010password\030\002 \001(\t\"\032\n\nCSLoginRsp\022\014\n\004"
    "type\030\001 \001(\r\"M\n\rCSRegisterReq\022\017\n\007account\030\001"
    " \001(\t\022\020\n\010password\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003"
    "sex\030\004 \001(\r\"\035\n\rCSRegisterRsp\022\014\n\004type\030\001 \001(\r"
    "\"]\n\027CSRegisterLoginReqParam\022\035\n\010LoginReq\030"
    "\001 \001(\0132\013.CSLoginReq\022#\n\013RegisterReq\030\002 \001(\0132"
    "\016.CSRegisterReq\"]\n\027CSRegisterLoginRspPar"
    "am\022\035\n\010LoginRsp\030\001 \001(\0132\013.CSLoginRsp\022#\n\013Reg"
    "isterRsp\030\002 \001(\0132\016.CSRegisterRsp\"b\n\022CSRegi"
    "sterLoginReq\022 \n\003cmd\030\001 \002(\0162\023.CSRegisterLo"
    "ginCmd\022*\n\010reqParam\030\002 \001(\0132\030.CSRegisterLog"
    "inReqParam\"r\n\022CSRegisterLoginRsp\022\016\n\006resu"
    "lt\030\001 \001(\005\022 \n\003cmd\030\002 \002(\0162\023.CSRegisterLoginC"
    "md\022*\n\010rspParam\030\003 \001(\0132\030.CSRegisterLoginRs"
    "pParam\"i\n\tCSMsgBody\022-\n\020RegisterLoginReq\030"
    "\001 \001(\0132\023.CSRegisterLoginReq\022-\n\020RegisterLo"
    "ginRsp\030\002 \001(\0132\023.CSRegisterLoginRsp\"1\n\tCSM"
    "sgHead\022\013\n\003uid\030\001 \002(\004\022\027\n\005msgID\030\002 \002(\0162\010.CSM"
    "sgID\";\n\005CSMsg\022\030\n\004head\030\001 \002(\0132\n.CSMsgHead\022"
    "\030\n\004body\030\002 \002(\0132\n.CSMsgBody*S\n\022CSRegisterL"
    "oginCmd\022\037\n\033CSRegisterLoginCmd_Register\020\001"
    "\022\034\n\030CSRegisterLoginCmd_Login\020\002*I\n\007CSMsgI"
    "D\022\020\n\014CS_MSGID_MIN\020\000\022\032\n\026CS_MSGID_Register"
    "Login\020\001\022\020\n\014CS_MSGID_MAX\020\002", 985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSmsg.proto", &protobuf_RegisterTypes);
  CSLoginReq::default_instance_ = new CSLoginReq();
  CSLoginRsp::default_instance_ = new CSLoginRsp();
  CSRegisterReq::default_instance_ = new CSRegisterReq();
  CSRegisterRsp::default_instance_ = new CSRegisterRsp();
  CSRegisterLoginReqParam::default_instance_ = new CSRegisterLoginReqParam();
  CSRegisterLoginRspParam::default_instance_ = new CSRegisterLoginRspParam();
  CSRegisterLoginReq::default_instance_ = new CSRegisterLoginReq();
  CSRegisterLoginRsp::default_instance_ = new CSRegisterLoginRsp();
  CSMsgBody::default_instance_ = new CSMsgBody();
  CSMsgHead::default_instance_ = new CSMsgHead();
  CSMsg::default_instance_ = new CSMsg();
  CSLoginReq::default_instance_->InitAsDefaultInstance();
  CSLoginRsp::default_instance_->InitAsDefaultInstance();
  CSRegisterReq::default_instance_->InitAsDefaultInstance();
  CSRegisterRsp::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginReqParam::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginRspParam::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginReq::default_instance_->InitAsDefaultInstance();
  CSRegisterLoginRsp::default_instance_->InitAsDefaultInstance();
  CSMsgBody::default_instance_->InitAsDefaultInstance();
  CSMsgHead::default_instance_->InitAsDefaultInstance();
  CSMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSmsg_2eproto {
  StaticDescriptorInitializer_CSmsg_2eproto() {
    protobuf_AddDesc_CSmsg_2eproto();
  }
} static_descriptor_initializer_CSmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* CSRegisterLoginCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginCmd_descriptor_;
}
bool CSRegisterLoginCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CSMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgID_descriptor_;
}
bool CSMsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginReq::kAccountFieldNumber;
const int CSLoginReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

CSLoginReq::CSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginReq::InitAsDefaultInstance() {
}

CSLoginReq::CSLoginReq(const CSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginReq::~CSLoginReq() {
  SharedDtor();
}

void CSLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginReq_descriptor_;
}

const CSLoginReq& CSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSLoginReq* CSLoginReq::default_instance_ = NULL;

CSLoginReq* CSLoginReq::New() const {
  return new CSLoginReq;
}

void CSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginReq::MergeFrom(const CSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginReq::CopyFrom(const CSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginReq::IsInitialized() const {

  return true;
}

void CSLoginReq::Swap(CSLoginReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginReq_descriptor_;
  metadata.reflection = CSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

CSLoginRsp::CSLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginRsp::InitAsDefaultInstance() {
}

CSLoginRsp::CSLoginRsp(const CSLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginRsp::~CSLoginRsp() {
  SharedDtor();
}

void CSLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginRsp_descriptor_;
}

const CSLoginRsp& CSLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSLoginRsp* CSLoginRsp::default_instance_ = NULL;

CSLoginRsp* CSLoginRsp::New() const {
  return new CSLoginRsp;
}

void CSLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginRsp::MergeFrom(const CSLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginRsp::CopyFrom(const CSLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginRsp::IsInitialized() const {

  return true;
}

void CSLoginRsp::Swap(CSLoginRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginRsp_descriptor_;
  metadata.reflection = CSLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterReq::kAccountFieldNumber;
const int CSRegisterReq::kPasswordFieldNumber;
const int CSRegisterReq::kNameFieldNumber;
const int CSRegisterReq::kSexFieldNumber;
#endif  // !_MSC_VER

CSRegisterReq::CSRegisterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterReq::InitAsDefaultInstance() {
}

CSRegisterReq::CSRegisterReq(const CSRegisterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterReq::~CSRegisterReq() {
  SharedDtor();
}

void CSRegisterReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterReq_descriptor_;
}

const CSRegisterReq& CSRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterReq* CSRegisterReq::default_instance_ = NULL;

CSRegisterReq* CSRegisterReq::New() const {
  return new CSRegisterReq;
}

void CSRegisterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterReq::MergeFrom(const CSRegisterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterReq::CopyFrom(const CSRegisterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterReq::IsInitialized() const {

  return true;
}

void CSRegisterReq::Swap(CSRegisterReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterReq_descriptor_;
  metadata.reflection = CSRegisterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

CSRegisterRsp::CSRegisterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterRsp::InitAsDefaultInstance() {
}

CSRegisterRsp::CSRegisterRsp(const CSRegisterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterRsp::~CSRegisterRsp() {
  SharedDtor();
}

void CSRegisterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterRsp_descriptor_;
}

const CSRegisterRsp& CSRegisterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterRsp* CSRegisterRsp::default_instance_ = NULL;

CSRegisterRsp* CSRegisterRsp::New() const {
  return new CSRegisterRsp;
}

void CSRegisterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterRsp::MergeFrom(const CSRegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterRsp::CopyFrom(const CSRegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterRsp::IsInitialized() const {

  return true;
}

void CSRegisterRsp::Swap(CSRegisterRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterRsp_descriptor_;
  metadata.reflection = CSRegisterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginReqParam::kLoginReqFieldNumber;
const int CSRegisterLoginReqParam::kRegisterReqFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginReqParam::CSRegisterLoginReqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginReqParam::InitAsDefaultInstance() {
  loginreq_ = const_cast< ::CSLoginReq*>(&::CSLoginReq::default_instance());
  registerreq_ = const_cast< ::CSRegisterReq*>(&::CSRegisterReq::default_instance());
}

CSRegisterLoginReqParam::CSRegisterLoginReqParam(const CSRegisterLoginReqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginReqParam::SharedCtor() {
  _cached_size_ = 0;
  loginreq_ = NULL;
  registerreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginReqParam::~CSRegisterLoginReqParam() {
  SharedDtor();
}

void CSRegisterLoginReqParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginreq_;
    delete registerreq_;
  }
}

void CSRegisterLoginReqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginReqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginReqParam_descriptor_;
}

const CSRegisterLoginReqParam& CSRegisterLoginReqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginReqParam* CSRegisterLoginReqParam::default_instance_ = NULL;

CSRegisterLoginReqParam* CSRegisterLoginReqParam::New() const {
  return new CSRegisterLoginReqParam;
}

void CSRegisterLoginReqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginreq()) {
      if (loginreq_ != NULL) loginreq_->::CSLoginReq::Clear();
    }
    if (has_registerreq()) {
      if (registerreq_ != NULL) registerreq_->::CSRegisterReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginReqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSLoginReq LoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterReq;
        break;
      }

      // optional .CSRegisterReq RegisterReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginReqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginreq(), output);
  }

  // optional .CSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginReqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSLoginReq LoginReq = 1;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginreq(), target);
  }

  // optional .CSRegisterReq RegisterReq = 2;
  if (has_registerreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginReqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSLoginReq LoginReq = 1;
    if (has_loginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginreq());
    }

    // optional .CSRegisterReq RegisterReq = 2;
    if (has_registerreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginReqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginReqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginReqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginReqParam::MergeFrom(const CSRegisterLoginReqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginreq()) {
      mutable_loginreq()->::CSLoginReq::MergeFrom(from.loginreq());
    }
    if (from.has_registerreq()) {
      mutable_registerreq()->::CSRegisterReq::MergeFrom(from.registerreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginReqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginReqParam::CopyFrom(const CSRegisterLoginReqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginReqParam::IsInitialized() const {

  return true;
}

void CSRegisterLoginReqParam::Swap(CSRegisterLoginReqParam* other) {
  if (other != this) {
    std::swap(loginreq_, other->loginreq_);
    std::swap(registerreq_, other->registerreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginReqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginReqParam_descriptor_;
  metadata.reflection = CSRegisterLoginReqParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginRspParam::kLoginRspFieldNumber;
const int CSRegisterLoginRspParam::kRegisterRspFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginRspParam::CSRegisterLoginRspParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginRspParam::InitAsDefaultInstance() {
  loginrsp_ = const_cast< ::CSLoginRsp*>(&::CSLoginRsp::default_instance());
  registerrsp_ = const_cast< ::CSRegisterRsp*>(&::CSRegisterRsp::default_instance());
}

CSRegisterLoginRspParam::CSRegisterLoginRspParam(const CSRegisterLoginRspParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginRspParam::SharedCtor() {
  _cached_size_ = 0;
  loginrsp_ = NULL;
  registerrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginRspParam::~CSRegisterLoginRspParam() {
  SharedDtor();
}

void CSRegisterLoginRspParam::SharedDtor() {
  if (this != default_instance_) {
    delete loginrsp_;
    delete registerrsp_;
  }
}

void CSRegisterLoginRspParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginRspParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginRspParam_descriptor_;
}

const CSRegisterLoginRspParam& CSRegisterLoginRspParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginRspParam* CSRegisterLoginRspParam::default_instance_ = NULL;

CSRegisterLoginRspParam* CSRegisterLoginRspParam::New() const {
  return new CSRegisterLoginRspParam;
}

void CSRegisterLoginRspParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginrsp()) {
      if (loginrsp_ != NULL) loginrsp_->::CSLoginRsp::Clear();
    }
    if (has_registerrsp()) {
      if (registerrsp_ != NULL) registerrsp_->::CSRegisterRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginRspParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSLoginRsp LoginRsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterRsp;
        break;
      }

      // optional .CSRegisterRsp RegisterRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginRspParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginrsp(), output);
  }

  // optional .CSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginRspParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSLoginRsp LoginRsp = 1;
  if (has_loginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginrsp(), target);
  }

  // optional .CSRegisterRsp RegisterRsp = 2;
  if (has_registerrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginRspParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSLoginRsp LoginRsp = 1;
    if (has_loginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginrsp());
    }

    // optional .CSRegisterRsp RegisterRsp = 2;
    if (has_registerrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginRspParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginRspParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginRspParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginRspParam::MergeFrom(const CSRegisterLoginRspParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginrsp()) {
      mutable_loginrsp()->::CSLoginRsp::MergeFrom(from.loginrsp());
    }
    if (from.has_registerrsp()) {
      mutable_registerrsp()->::CSRegisterRsp::MergeFrom(from.registerrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginRspParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginRspParam::CopyFrom(const CSRegisterLoginRspParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginRspParam::IsInitialized() const {

  return true;
}

void CSRegisterLoginRspParam::Swap(CSRegisterLoginRspParam* other) {
  if (other != this) {
    std::swap(loginrsp_, other->loginrsp_);
    std::swap(registerrsp_, other->registerrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginRspParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginRspParam_descriptor_;
  metadata.reflection = CSRegisterLoginRspParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginReq::kCmdFieldNumber;
const int CSRegisterLoginReq::kReqParamFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginReq::CSRegisterLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginReq::InitAsDefaultInstance() {
  reqparam_ = const_cast< ::CSRegisterLoginReqParam*>(&::CSRegisterLoginReqParam::default_instance());
}

CSRegisterLoginReq::CSRegisterLoginReq(const CSRegisterLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  reqparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginReq::~CSRegisterLoginReq() {
  SharedDtor();
}

void CSRegisterLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete reqparam_;
  }
}

void CSRegisterLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginReq_descriptor_;
}

const CSRegisterLoginReq& CSRegisterLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginReq* CSRegisterLoginReq::default_instance_ = NULL;

CSRegisterLoginReq* CSRegisterLoginReq::New() const {
  return new CSRegisterLoginReq;
}

void CSRegisterLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_reqparam()) {
      if (reqparam_ != NULL) reqparam_->::CSRegisterLoginReqParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSRegisterLoginCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqParam;
        break;
      }

      // optional .CSRegisterLoginReqParam reqParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .CSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reqparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSRegisterLoginCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .CSRegisterLoginReqParam reqParam = 2;
  if (has_reqparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reqparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSRegisterLoginCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSRegisterLoginReqParam reqParam = 2;
    if (has_reqparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginReq::MergeFrom(const CSRegisterLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_reqparam()) {
      mutable_reqparam()->::CSRegisterLoginReqParam::MergeFrom(from.reqparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginReq::CopyFrom(const CSRegisterLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRegisterLoginReq::Swap(CSRegisterLoginReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(reqparam_, other->reqparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginReq_descriptor_;
  metadata.reflection = CSRegisterLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegisterLoginRsp::kResultFieldNumber;
const int CSRegisterLoginRsp::kCmdFieldNumber;
const int CSRegisterLoginRsp::kRspParamFieldNumber;
#endif  // !_MSC_VER

CSRegisterLoginRsp::CSRegisterLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegisterLoginRsp::InitAsDefaultInstance() {
  rspparam_ = const_cast< ::CSRegisterLoginRspParam*>(&::CSRegisterLoginRspParam::default_instance());
}

CSRegisterLoginRsp::CSRegisterLoginRsp(const CSRegisterLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegisterLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cmd_ = 1;
  rspparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegisterLoginRsp::~CSRegisterLoginRsp() {
  SharedDtor();
}

void CSRegisterLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rspparam_;
  }
}

void CSRegisterLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegisterLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegisterLoginRsp_descriptor_;
}

const CSRegisterLoginRsp& CSRegisterLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSRegisterLoginRsp* CSRegisterLoginRsp::default_instance_ = NULL;

CSRegisterLoginRsp* CSRegisterLoginRsp::New() const {
  return new CSRegisterLoginRsp;
}

void CSRegisterLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cmd_ = 1;
    if (has_rspparam()) {
      if (rspparam_ != NULL) rspparam_->::CSRegisterLoginRspParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegisterLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required .CSRegisterLoginCmd cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSRegisterLoginCmd_IsValid(value)) {
            set_cmd(static_cast< ::CSRegisterLoginCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rspParam;
        break;
      }

      // optional .CSRegisterLoginRspParam rspParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rspParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegisterLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .CSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // optional .CSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rspparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegisterLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .CSRegisterLoginCmd cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // optional .CSRegisterLoginRspParam rspParam = 3;
  if (has_rspparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rspparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegisterLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .CSRegisterLoginCmd cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .CSRegisterLoginRspParam rspParam = 3;
    if (has_rspparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rspparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegisterLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegisterLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegisterLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegisterLoginRsp::MergeFrom(const CSRegisterLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rspparam()) {
      mutable_rspparam()->::CSRegisterLoginRspParam::MergeFrom(from.rspparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegisterLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegisterLoginRsp::CopyFrom(const CSRegisterLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegisterLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSRegisterLoginRsp::Swap(CSRegisterLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cmd_, other->cmd_);
    std::swap(rspparam_, other->rspparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegisterLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegisterLoginRsp_descriptor_;
  metadata.reflection = CSRegisterLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgBody::kRegisterLoginReqFieldNumber;
const int CSMsgBody::kRegisterLoginRspFieldNumber;
#endif  // !_MSC_VER

CSMsgBody::CSMsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgBody::InitAsDefaultInstance() {
  registerloginreq_ = const_cast< ::CSRegisterLoginReq*>(&::CSRegisterLoginReq::default_instance());
  registerloginrsp_ = const_cast< ::CSRegisterLoginRsp*>(&::CSRegisterLoginRsp::default_instance());
}

CSMsgBody::CSMsgBody(const CSMsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgBody::SharedCtor() {
  _cached_size_ = 0;
  registerloginreq_ = NULL;
  registerloginrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgBody::~CSMsgBody() {
  SharedDtor();
}

void CSMsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete registerloginreq_;
    delete registerloginrsp_;
  }
}

void CSMsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgBody_descriptor_;
}

const CSMsgBody& CSMsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgBody* CSMsgBody::default_instance_ = NULL;

CSMsgBody* CSMsgBody::New() const {
  return new CSMsgBody;
}

void CSMsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_registerloginreq()) {
      if (registerloginreq_ != NULL) registerloginreq_->::CSRegisterLoginReq::Clear();
    }
    if (has_registerloginrsp()) {
      if (registerloginrsp_ != NULL) registerloginrsp_->::CSRegisterLoginRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSRegisterLoginReq RegisterLoginReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RegisterLoginRsp;
        break;
      }

      // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterLoginRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerloginrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->registerloginreq(), output);
  }

  // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->registerloginrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CSRegisterLoginReq RegisterLoginReq = 1;
  if (has_registerloginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->registerloginreq(), target);
  }

  // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
  if (has_registerloginrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->registerloginrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSRegisterLoginReq RegisterLoginReq = 1;
    if (has_registerloginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginreq());
    }

    // optional .CSRegisterLoginRsp RegisterLoginRsp = 2;
    if (has_registerloginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerloginrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgBody::MergeFrom(const CSMsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registerloginreq()) {
      mutable_registerloginreq()->::CSRegisterLoginReq::MergeFrom(from.registerloginreq());
    }
    if (from.has_registerloginrsp()) {
      mutable_registerloginrsp()->::CSRegisterLoginRsp::MergeFrom(from.registerloginrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgBody::CopyFrom(const CSMsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgBody::IsInitialized() const {

  if (has_registerloginreq()) {
    if (!this->registerloginreq().IsInitialized()) return false;
  }
  if (has_registerloginrsp()) {
    if (!this->registerloginrsp().IsInitialized()) return false;
  }
  return true;
}

void CSMsgBody::Swap(CSMsgBody* other) {
  if (other != this) {
    std::swap(registerloginreq_, other->registerloginreq_);
    std::swap(registerloginrsp_, other->registerloginrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgBody_descriptor_;
  metadata.reflection = CSMsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgHead::kUidFieldNumber;
const int CSMsgHead::kMsgIDFieldNumber;
#endif  // !_MSC_VER

CSMsgHead::CSMsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgHead::InitAsDefaultInstance() {
}

CSMsgHead::CSMsgHead(const CSMsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgHead::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgHead::~CSMsgHead() {
  SharedDtor();
}

void CSMsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgHead_descriptor_;
}

const CSMsgHead& CSMsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsgHead* CSMsgHead::default_instance_ = NULL;

CSMsgHead* CSMsgHead::New() const {
  return new CSMsgHead;
}

void CSMsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgID;
        break;
      }

      // required .CSMsgID msgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSMsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required .CSMsgID msgID = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required .CSMsgID msgID = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required .CSMsgID msgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgHead::MergeFrom(const CSMsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgHead::CopyFrom(const CSMsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSMsgHead::Swap(CSMsgHead* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgHead_descriptor_;
  metadata.reflection = CSMsgHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsg::kHeadFieldNumber;
const int CSMsg::kBodyFieldNumber;
#endif  // !_MSC_VER

CSMsg::CSMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsg::InitAsDefaultInstance() {
  head_ = const_cast< ::CSMsgHead*>(&::CSMsgHead::default_instance());
  body_ = const_cast< ::CSMsgBody*>(&::CSMsgBody::default_instance());
}

CSMsg::CSMsg(const CSMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsg::~CSMsg() {
  SharedDtor();
}

void CSMsg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete body_;
  }
}

void CSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsg_descriptor_;
}

const CSMsg& CSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSmsg_2eproto();
  return *default_instance_;
}

CSMsg* CSMsg::default_instance_ = NULL;

CSMsg* CSMsg::New() const {
  return new CSMsg;
}

void CSMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::CSMsgHead::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::CSMsgBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSMsgHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .CSMsgBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSMsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .CSMsgBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSMsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .CSMsgBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSMsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .CSMsgBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsg::MergeFrom(const CSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::CSMsgHead::MergeFrom(from.head());
    }
    if (from.has_body()) {
      mutable_body()->::CSMsgBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsg::CopyFrom(const CSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void CSMsg::Swap(CSMsg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsg_descriptor_;
  metadata.reflection = CSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
